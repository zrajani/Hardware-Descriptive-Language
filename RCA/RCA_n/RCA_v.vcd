$date
	Wed Dec 13 13:30:18 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testAdder $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " carryout $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 1 % CarryIn $end
$scope module adder $end
$var wire 4 & a0 [3:0] $end
$var wire 4 ' a1 [3:0] $end
$var wire 1 % ci $end
$var wire 4 ( sum [3:0] $end
$var wire 1 " co $end
$var wire 5 ) carry [4:0] $end
$scope begin r_loop[0] $end
$var wire 1 * t1 $end
$var wire 1 + t2 $end
$var wire 1 , t3 $end
$upscope $end
$scope begin r_loop[1] $end
$var wire 1 - t1 $end
$var wire 1 . t2 $end
$var wire 1 / t3 $end
$upscope $end
$scope begin r_loop[2] $end
$var wire 1 0 t1 $end
$var wire 1 1 t2 $end
$var wire 1 2 t3 $end
$upscope $end
$scope begin r_loop[3] $end
$var wire 1 3 t1 $end
$var wire 1 4 t2 $end
$var wire 1 5 t3 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
05
14
03
02
01
00
1/
0.
1-
0,
1+
0*
b10110 )
b100 (
b1011 '
b1001 &
0%
b1011 $
b1001 #
1"
b100 !
$end
#10
b1000 !
b1000 (
12
1,
1*
0+
10
b11111 )
1%
b1000 $
b1000 '
b1111 #
b1111 &
#40
